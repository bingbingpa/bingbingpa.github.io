{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week11/","result":{"data":{"post":{"id":"7fa050b7-0f17-55c7-938a-e50b04c93d4f","html":"<h2>whiteship/live-study 11주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/11\">자바의 열거형에 대해 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것 (필수)</p>\n<ul>\n<li>enum 정의하는 방법</li>\n<li>enum 이 제공하는 메소드 (values()와 valueOf())</li>\n<li>java.lang.Enum</li>\n<li>EnumSet</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>1. enum 정의하는 방법</h3>\n<ul>\n<li>enum: 컴퓨터 프로그래밍에서 Enumerated Type(열거형 타입)을 줄여서 보통 Enum 이라고 쓴다.\n요소, 멤버라 불리는 명명된 값의 집합을 이루는 자료형이다. 열거자 이름들은 일반적으로 해당 언어의 상수 역할을 하는 식별자이다. <em>- Wikipedia -</em></li>\n<li>\n<p>enum 을 정의하는 방법</p>\n<ul>\n<li>\n<p>가장 단순한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">{</span>\n  WINTER<span class=\"token punctuation\">,</span> SPRING<span class=\"token punctuation\">,</span> SUMMER<span class=\"token punctuation\">,</span> FALL\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>데이터와 메서드가 있는 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Coin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PENNY</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NICKEL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">DIME</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">QUARTER</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>메소드 오버라이드: 추상 메소드를 오버라이드 하여 같은 메소드 시그니처로 다른 결과값을 만들어 낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PLUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MINUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MULTIPLY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Operator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Operator</span><span class=\"token punctuation\">.</span>MINUS<span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>lambda 식 : java8 이상에서는 람다식을 활용하면 추삼ㅇ 메소드를 오버라이드 하지 않고도 함수를 상태값을 갖는 enum 으로 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OperatorLambda</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PLUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MINUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MULTIPLY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> expression<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">OperatorLambda</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>2. enum 이 제공하는 메소드</h3>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메소드 타입</th>\n<th align=\"left\">메소드 명</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Static Method</td>\n<td align=\"left\">valueOf(String arg)</td>\n<td align=\"left\">String 값을 enum 에서 가져온다.</td>\n</tr>\n<tr>\n<td align=\"left\">Static Method</td>\n<td align=\"left\">values()</td>\n<td align=\"left\">enum 의 요소들을 순서대로 enum 타입의 배열로 리턴</td>\n</tr>\n<tr>\n<td align=\"left\">Static 이 아닌 Method</td>\n<td align=\"left\">name()</td>\n<td align=\"left\">호출된 값의 이름을 String 으로 리턴</td>\n</tr>\n<tr>\n<td align=\"left\">Static 이 아닌 Method</td>\n<td align=\"left\">compareTo(E o)</td>\n<td align=\"left\">enum 과 지정된 객체의 순서를 비교. 지정된 객체보다 작은 경우 음의 정수, 동일하면 0, 크면 양의 정수 리턴</td>\n</tr>\n<tr>\n<td align=\"left\">Static 이 아닌 Method</td>\n<td align=\"left\">equals(Object other)</td>\n<td align=\"left\">지정된 객체가 enum 정수와 같은 경우 true 리턴</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><strong>ordinal 메서드는 해당 상수가 몇 번째인지를 리턴할 뿐이고, 쓸모가 없다. 이 값에 의존하는 코드를 작성하는 것도 좋은 선택이 아니다. 쓰지 않는 것이 좋다.</strong></li>\n<li>Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as EnumSet and EnumMap.\n(대부분의 프로그래머는 이 메서드를 쓸 일이 없다. 이 메서드는 EnumSet 과 EnumMap 같이 열거 타입 기반의 범용 자료구조에 쓸 목적으로 설계되었다.) <em>- Java API 문서 -</em></li>\n</ul>\n<br>\n<h3>3. java.lang.Enum</h3>\n<ul>\n<li>java.lang.Enum 클래스는 열거 타입의 베이스 클래스이다.</li>\n<li><strong>모든 enum 은 암시적으로 java.lang.Enum 클래스를 확장한다. 자바에서 클래스는 하나의 클래스만 상속 할 수 있으므로 enum 은 다른 것을 확장 할 수 없다.</strong></li>\n<li>또한 java.lang.Enum 클래스를 확장한 것이기 때문에 valueOf(), name() 등의 메소드들을 사용할 수 있다.</li>\n</ul>\n<br>\n<h3>4. EnumSet</h3>\n<ul>\n<li>EnumSet 은 enum 타입에 사용하기 위한 특수한 Set 구현이다.</li>\n<li>고전적인 방법인 bit flag, bit mask 를 굳이 쓰지 말고 EnumSet 을 사용하도록 한다. EnumSet 은 내부적으로 bit flag 를 사용하고 있어 빠르며, 더 안전하게 다룰 수 있게 해준다.</li>\n<li>\n<p>다음과 같이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Planet</span><span class=\"token punctuation\">></span></span> planets <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span>NEPTUNE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span>EARTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Planet</span><span class=\"token punctuation\">></span></span> all <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Planet</span><span class=\"token punctuation\">></span></span> none <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>동기화가 필요하다면 Collections.synchronizedSet 을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyEnum</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyEnum</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h4>참조 링크</h4>\n<ul>\n<li><a href=\"https://velog.io/@ljinsk3/Enum%EC%9C%BC%EB%A1%9C-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">https://velog.io/@ljinsk3/Enum%EC%9C%BC%EB%A1%9C-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95</a></li>\n<li><a href=\"https://johngrib.github.io/wiki/java-enum/\">https://johngrib.github.io/wiki/java-enum/</a></li>\n<li><a href=\"https://parkadd.tistory.com/50\">https://parkadd.tistory.com/50</a></li>\n</ul>","fields":{"slug":"/whiteship-live-study-week11/","prefix":"2021-01-26"},"frontmatter":{"title":"자바 열거형","category":"java"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p><strong>OpenSesame</strong></p>\n<ul>\n<li>안되면 될 때 까지!</li>\n<li>무분별한 정보 보다는 정확한 정보를 전달하도록 노력하기.</li>\n</ul>"}},"pageContext":{"slug":"/whiteship-live-study-week11/","prev":{"id":"aeab691f-8e02-57c1-99c0-859424301ca5","fields":{"slug":"/whiteship-live-study-week10/","prefix":"2021-01-22","source":"posts"},"frontmatter":{"title":"자바 멀티쓰레드 프로그래밍","category":"java"}},"next":{"id":"2b315a3a-785c-5f42-85b1-6775f6ec2817","fields":{"slug":"/whiteship-live-study-week12/","prefix":"2021-02-01","source":"posts"},"frontmatter":{"title":"자바 애노테이션","category":"java"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}