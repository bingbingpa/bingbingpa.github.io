{"componentChunkName":"component---src-templates-post-template-js","path":"/dockerfile-manual/","result":{"data":{"post":{"id":"e4cf86b2-71ef-5164-8957-83b244290cfe","html":"<h3>Dockerfile 이란?</h3>\n<ul>\n<li>베이스가 되는 이미지에 각종 미들웨어를 설치 및 설정하고, 개발한 애플리케이션의 실행 모듈을 전개 하기 위한 애플리케이션의 실행 기반의 모든 구성 정보를 기술한다.</li>\n</ul>\n<h3>Dockerfile 의 기본 구문</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">옵션</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">FROM</td>\n<td align=\"left\">베이스 이미지</td>\n</tr>\n<tr>\n<td align=\"left\">RUN</td>\n<td align=\"left\">명령 실행</td>\n</tr>\n<tr>\n<td align=\"left\">CMD</td>\n<td align=\"left\">컨테이너 실행 명령</td>\n</tr>\n<tr>\n<td align=\"left\">LABEL</td>\n<td align=\"left\">라벨 설정</td>\n</tr>\n<tr>\n<td align=\"left\">EXPOSE</td>\n<td align=\"left\">포트 익스포트</td>\n</tr>\n<tr>\n<td align=\"left\">ENV</td>\n<td align=\"left\">환경변수</td>\n</tr>\n<tr>\n<td align=\"left\">ADD</td>\n<td align=\"left\">파일/디렉토리 추가</td>\n</tr>\n<tr>\n<td align=\"left\">COPY</td>\n<td align=\"left\">파일 복사</td>\n</tr>\n<tr>\n<td align=\"left\">ENTRYPOINT</td>\n<td align=\"left\">컨테이너 실행 명령</td>\n</tr>\n<tr>\n<td align=\"left\">VOLUME</td>\n<td align=\"left\">볼륨 마운트</td>\n</tr>\n<tr>\n<td align=\"left\">USER</td>\n<td align=\"left\">사용자 지정</td>\n</tr>\n<tr>\n<td align=\"left\">WORKDIR</td>\n<td align=\"left\">작업 디렉토리</td>\n</tr>\n<tr>\n<td align=\"left\">ARG</td>\n<td align=\"left\">Dockerfile 안의 변수</td>\n</tr>\n<tr>\n<td align=\"left\">ONBUILD</td>\n<td align=\"left\">빌드 완료 후 실행되는 명령</td>\n</tr>\n<tr>\n<td align=\"left\">STOPSIGNAL</td>\n<td align=\"left\">시스템 콜 시그널 설정</td>\n</tr>\n<tr>\n<td align=\"left\">HEALTHCHECK</td>\n<td align=\"left\">컨테이너의 헬스 체크</td>\n</tr>\n<tr>\n<td align=\"left\">SHELL</td>\n<td align=\"left\">기본 쉘 설정</td>\n</tr>\n</tbody>\n</table>\n<h3>Dockerfile 로부터 Docker 이미지 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">docker build -t [생성할 이미지명]:[태그명] [Dockerfile 의 위치]</code></pre></div>\n<h3>명령 실행(RUN 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> [실행하고 싶은 명령]</span></code></pre></div>\n<ul>\n<li>RUN 명령은 여러개를 사용 할 수 있지만, 사용할 때 마다 레이어가 생성되므로 RUN 명령은 한 줄에 쓰는 것이 좋다. 또한 RUN 명령은 \\로 줄 바꿈을 넣어서 가독성을 높일 수 있다.</li>\n</ul>\n<h3>데몬 실행(CMD 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [실행하고 싶은 명령]</span></code></pre></div>\n<ul>\n<li>RUN 명령은 이미지를 작성하기 위해 실행하는 명령을 기술하지만, CMD 명령은 이미지를 바탕으로 생성된 컨테이너 안에서 명령을 실행한다.</li>\n<li>Dockerfile 에는 하나의 CMD 명령을 기술 할 수 있고, 만일 여러 개를 지정하면 마지막 명령만 유효하다.</li>\n</ul>\n<h3>데몬 실행(ENTRYPOINT 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">EXTRYPOINT [실행하고 싶은 명령]</code></pre></div>\n<ul>\n<li>ENTRYPOINT 명령에서 지정한 명령은 docker container run명령을 실행 했을 때 실행된다.</li>\n<li>CMD 명령의 경우는 컨테이너 시작 시에 실행하고 싶은 명령을 정의해도 docker container run 명령 실행 시에 인수로 새로운 명령(ENTRYPOINT)을 지정한 경우 이것을 우선 실행한다.</li>\n<li>ENTRYPOINT 명령으로는 실행하고 싶은 명령 자체를 지정하고 CMD 명령으로는 그 명령의 인수를 지정하면, 컨테이너를 실행했을 때의 기본 작동을 결정할 수 있다.</li>\n<li>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"top\"</span>]</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"d\"</span>, <span class=\"token string\">\"10\"</span>]</span></code></pre></div>\n</li>\n</ul>\n<h3>빌드 완료 후에 실행되는 명령(ONBUILD 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ONBUILD</span> [실행하고 싶은 명령]</span></code></pre></div>\n<ul>\n<li>ONBUILD 명령은 자신의 Dockerfile로부터 생성한 이미지를 베이스 이미지로 한 다른 Dockerfile을 빌드할 때 실행하고 싶은 명령을 기술한다.</li>\n<li>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># 베이스 이미지 설정</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:17.10</span>\n\n<span class=\"token comment\"># Nginx 설치</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get -y update &amp;&amp; apt-get -y upgrade</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get -y install nginx</span>\n\n<span class=\"token comment\"># 포트 지정</span>\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80</span>\n\n<span class=\"token comment\"># 웹 콘텐츠 배치</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ONBUILD</span> <span class=\"token keyword\">ADD</span> website.tar /var/www/html</span>\n\n<span class=\"token comment\"># Nginx 실행</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"nginx\"</span>, <span class=\"token string\">\"-g\"</span>, <span class=\"token string\">\"daemon off;\"</span>]</span></code></pre></div>\n</li>\n</ul>\n<h3>시스템 콜 시그널의 설정(STOPSIGNAL 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">STOPSIGNAL</span> [시그널]</span></code></pre></div>\n<ul>\n<li>컨테이너를 종료할 때에 송신하는 시그널을 설정할 때 사용한다.</li>\n</ul>\n<h3>컨테이너의 헬스 체크 명령(HEALTHCHECK 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">HEALTHCHECK</span> [옵션] CMD 실행할 명령</span></code></pre></div>\n<ul>\n<li>컨테이너 안의 프로세스가 정상적으로 작동하고 있는지를 체크하고 싶을 때 사용한다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">옵션</th>\n<th align=\"left\">설명</th>\n<th align=\"left\">기본값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">--interval=n</td>\n<td align=\"left\">헬스 체크 간격</td>\n<td align=\"left\">30S</td>\n</tr>\n<tr>\n<td align=\"left\">--timeout=n</td>\n<td align=\"left\">헬스 체크 타임아웃</td>\n<td align=\"left\">30S</td>\n</tr>\n<tr>\n<td align=\"left\">--retries=N</td>\n<td align=\"left\">타임아웃 횟수</td>\n<td align=\"left\">3</td>\n</tr>\n</tbody>\n</table>\n<h3>환경변수 설정(ENV 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> [key] [value]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> [key]=[value]</span></code></pre></div>\n<ul>\n<li>Dockerfile 안에서 환경변수를 설정하고 싶을 때 사용하고, 위의 두 가지 서식중 하나로 기술한다.</li>\n</ul>\n<h3>작업 디렉토리 지정(WORKDIR 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> [작업 디렉토리 경로]</span></code></pre></div>\n<ul>\n<li>Dockerfile에서 정의한 명령을 실행하기 위한 작업용 디렉토리를 지정할 때 사용한다. 만일 지정한 디렉토리가 존재하지 않으면 새로 작성하고, WORKDIR 명령은 Dockerfile 안에서 여러 번 사용 할 수 있다.</li>\n</ul>\n<h3>사용자 지정(USER 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">USER</span> [사용자명/UID]</span></code></pre></div>\n<ul>\n<li>\n<p>이미지 실행이나 Dockerfile의 다음과 같은 명령을 실행하기 위한 사용자를 지정할 때 사용한다.</p>\n<ul>\n<li>RUN 명령</li>\n<li>CMD 명령</li>\n<li>ENTRYPOINT 명령</li>\n</ul>\n</li>\n</ul>\n<h3>라벨 지정(LABEL 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> &lt;키 명>=&lt;값></span></code></pre></div>\n<ul>\n<li>이미지에 버전 정보나 작성자 정보, 코멘트 등과 같은 정보를 제공할 때 사용한다.</li>\n</ul>\n<h3>포트 설정(EXPOSE 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> &lt;포트 번호></span></code></pre></div>\n<ul>\n<li>컨테이너의 공개 포트 번호를 지정할 때 사용한다.</li>\n</ul>\n<h3>Dockerfile 내 변수의 설정(ARG 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> &lt;이름> [=기본값]</span></code></pre></div>\n<ul>\n<li>Dockerfile 안에서 사용할 변수를 정의 할 때 사용한다. 이 ARG 명령을 사용하면 변수의 값에 따라 생성되는 이미지의 내용을 바꿀 수 있다.</li>\n<li>환경변수인 ENV와는 달리 이 변수는 Dockerfile 안에서만 사용할 수 있다.</li>\n<li>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> YOURNAME=<span class=\"token string\">\"asa\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo <span class=\"token variable\">$YOURNAME</span></span></code></pre></div>\n</li>\n</ul>\n<h3>기본 쉘 설정(SHELL 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">SHELL</span> [<span class=\"token string\">\"쉘의 경로\"</span>, <span class=\"token string\">\"파라미터\"</span>]</span></code></pre></div>\n<ul>\n<li>쉘 형식으로 명령을 실행할 때 기본 쉘을 설정할 때 사용한다. SHELL명령을 지정하지 않았을 때 Linux의 기본 쉘은 [“/bin/sh”,“-c”], Windows는 [“cmd”, “/S”, “/C”]이 된다.</li>\n</ul>\n<h3>파일 및 디렉토리 추가(ADD 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> &lt;호스트의 파일 경로> &lt;Docker 이미지 파일 경로></span></code></pre></div>\n<ul>\n<li>이미지에 호스트상의 파일이나 디렉토리를 추가할 때 사용하며, 호스트상의 파일이나 디렉토리, 원격 파일을 Docker 이미지 안으로 복사한다.</li>\n</ul>\n<h3>빌드에 불필요한 파일 제외</h3>\n<ul>\n<li><strong>.dockerignore</strong>이라는 이름의 파일 안에 해당 파일명을 기술하면 제외된다.</li>\n</ul>\n<h3>파일 복사(COPY 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> &lt;호스트의 파일 경로> &lt;Docker 이미지의 파일 경로></span></code></pre></div>\n<ul>\n<li>이미지에 호스트상의 파일이나 디렉토리를 복사할 때 사용한다.</li>\n<li>ADD 명령과 비슷하다. 하지만 ADD 명령은 원격 파일의 다운로드나 아카이브의 압축 해제 등과 같은 기능을 갖고 있지만, COPY 명령은 호스트상의 파일을 이미지 안으로 <strong>복사하는</strong> 처리만 한다.\n이 때문에 단순이 이미지 안에 파일을 배치하기만 하고 싶을 때는 COPY 명령을 사용한다.</li>\n<li><strong>Dockerfile로부터 이미지를 만들 때 docker build 명령은 Dockerfile을 포함하는 디렉토리(서브디렉토리를 포함한다)를 모두 Docker 데몬으로 전송한다. 그래서 Dockerfile의\n저장 위치는 빈 디렉토리를 만들고 거기에 Dockerfile을 놓아두고 이미지를 작성하는 방법을 권장한다.</strong></li>\n</ul>\n<h3>볼륨 마운트(VOLUME 명령)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">VOLUME</span> [<span class=\"token string\">\"/마운트 포인트\"</span>]</span></code></pre></div>\n<ul>\n<li>이미지에 볼률을 할당할 때 사용한다.</li>\n<li>지정한 이름의 마운트 포인트를 작성하고, 호스트나 그 외 다른 컨테이너로부터 볼륨의 외부 마운트를 수행한다.</li>\n<li>컨테이너는 영구 데이터를 저장하는 데는 적합하지 않다. 그래서 영구 저장이 필요한 데이터는 컨테이너 밖의 스토리지에 저장하는 것이 좋다.</li>\n<li>영구 데이터는 Docker의 호스트 머신상의 볼륨에 마운트하거나 공유 스토리지를 볼륨으로 마운트 하는 것이 가능하다.</li>\n</ul>","fields":{"slug":"/dockerfile-manual/","prefix":"2020-08-20"},"frontmatter":{"title":"Dockerfile 작성 방법 정리","category":"infra"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p><strong>OpenSesame</strong></p>\n<ul>\n<li>안되면 될 때 까지!</li>\n<li>무분별한 정보 보다는 정확한 정보를 전달하도록 노력하기.</li>\n</ul>"}},"pageContext":{"slug":"/dockerfile-manual/","prev":{"id":"5256916d-9388-5909-aa51-d924ac3d5b9e","fields":{"slug":"/source-tree-remove/","prefix":"2020-08-17","source":"posts"},"frontmatter":{"title":"Windows10 source tree 완전 삭제","category":"etc"}},"next":{"id":"c5aefe97-c4a5-52a5-92da-87b135d82754","fields":{"slug":"/docker-compose-manual/","prefix":"2020-08-27","source":"posts"},"frontmatter":{"title":"Docker Compose 작성 방법 및 명령어 정리","category":"infra"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}