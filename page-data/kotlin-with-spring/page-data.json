{"componentChunkName":"component---src-templates-post-template-js","path":"/kotlin-with-spring/","result":{"data":{"post":{"id":"14d1f339-fca9-5cb9-98d8-246fd5ca91ed","html":"<h3>필드 주입 방법</h3>\n<ul>\n<li>\n<p>다음의 코드에서 필드 주입은 동작하지 않는다. 필드 타입들이 null 이 될 수 없기 때문에 컴파일 타임에서 에러가 발생한다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Controller</span>\n<span class=\"token keyword\">class</span> ArticleController <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> articleService <span class=\"token operator\">:</span> ArticelService\n\n    <span class=\"token annotation builtin\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> tagService <span class=\"token operator\">:</span> TagService\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>생성자 주입으로 변경. 변수는 val 로 해야 한다. val 는 변경 불가능한(immutable) 참조를 지정하는 변수다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Controller</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">ArticleController</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> articleService <span class=\"token operator\">:</span> ArticelService\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> tagService <span class=\"token operator\">:</span> TagService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>필드 주입이 필요하면 지연 초기화를 사용 한다. lateinit 변경자를 붙이면 프로퍼티를 나중에 초기화 할 수 있다. 이때 이 프로퍼티는 항상 var 여야 한다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Controller</span>\n<span class=\"token keyword\">class</span> ArticleController <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> articleService <span class=\"token operator\">:</span> ArticelService\n\n    <span class=\"token annotation builtin\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> tagService <span class=\"token operator\">:</span> TagService\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>@RequestParam</h3>\n<ul>\n<li>\n<p>@RequestParam 의 필수 파라미터를 나타낼 때 required 속성을 사용하지 않음</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@Controller</span>\n<span class=\"token keyword\">class</span> SearchController <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@GetMapping</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@RequestParam</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> keyword <span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"/result\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>위의 keyword 라는 값을 필수 값으로 만들기 위해서는 null 이 불가능한 타입으로 바꿔줘야 한다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@Controller</span>\n<span class=\"token keyword\">class</span> SearchController <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@GetMapping</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@RequestParam</span> keyword <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"/result\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>java 의 static 키워드 대체하기</h3>\n<ul>\n<li>\n<p>companion object 를 사용하여 정적 필드와 메소드를 정의</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DEFAULT_THUMBNAIL <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">thumbnail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Article <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> DEFAULT_THUMBNAIL <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span>\n\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">thumbnail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>kotlin 코드를 자바에서 참조해야 한다면 다음과 같이 const, @JvmStatic 키워드를 추가해야 한다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Article <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> DEFAULT_THUMBNAIL <span class=\"token operator\">=</span> <span class=\"token string\">\"..\"</span>\n\n        <span class=\"token annotation builtin\">@JvmStatic</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">thumbnail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>테스트</h3>\n<ul>\n<li>\n<p>생성자 주입</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@TestConstructor</span><span class=\"token punctuation\">(</span>autowireMode <span class=\"token operator\">=</span> AutowireMode<span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ForumControllerTests</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> mockMvc<span class=\"token operator\">:</span> MockMvc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>mocMvc 테스트</p>\n<ul>\n<li>기존 자바에서 작성할 때</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/forum/topics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>TEXT_HTML<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isOK\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"forum/topics\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>코틀린에서 작성할 때(<em>com.ninja-squad:springmockk 를 사용하면 조금 더 간결하게 mock 을 사용할 수 있다.</em>)</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/forum/topics\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    accept <span class=\"token operator\">=</span> MediaType<span class=\"token punctuation\">.</span>TEXT_HTML\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token punctuation\">{</span> <span class=\"token function\">isOK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    view <span class=\"token punctuation\">{</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"forum/topics\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    model <span class=\"token punctuation\">{</span> <span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>spring data JPA</h3>\n<ul>\n<li>\n<p>findByIdOrNull()(spring data 2.1.4(springBoot 2.1.2)에 추가). kotlin extension function 으로 구현되어 있다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> optionalUser<span class=\"token operator\">:</span> Optional<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\noptionalUser<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\noptionalUser<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span></code></pre></div>\n</li>\n<li>위 코드를 이렇게 간단히 쓸 수 있다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> user<span class=\"token operator\">:</span> User<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdOrNull</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>JPA Entity</p>\n<ul>\n<li>java 코드</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// optional</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getters, setters</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>kotlin 코드</p>\n<ul>\n<li>jpa entity 는 기본 생성자가 필요하기 때문에 <strong>kotlin(“plugin.jpa”)</strong> 가 필요하다.</li>\n<li>해당 플러그인은 @Entity, @Embeddable, @MappedSuperClass 을 사용하면 자동으로 기본 생성자를 만들어준다.</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Entity</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@Id</span>\n    <span class=\"token annotation builtin\">@GeneratedValue</span>\n    <span class=\"token keyword\">var</span> id<span class=\"token operator\">:</span> Long<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token annotation builtin\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n\n    <span class=\"token keyword\">var</span> phoneNumber<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>kotlin plugin</h3>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> kotlinVersion <span class=\"token operator\">=</span> <span class=\"token string\">\"1.6.10\"</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugin.spring\"</span><span class=\"token punctuation\">)</span> version kotlinVersion\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugin.jpa\"</span><span class=\"token punctuation\">)</span> version kotlinVersion\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>plugins.spring</p>\n<ul>\n<li>해당 플러그인을 사용하면 @Component, @Async, @Transactional, @Cacheable, @SpringBootTest, @Configuration,\n@Controller, @RestController, @Service, @Repository 어노테이션에 <em>app-open</em>을 자동으로 추가한다.(kotlin-allopen, plugin.spring 은 동일한 프로젝트다.)</li>\n<li>코틀린에서 기본적으로 클래스는 final 이며, 해당 플러그인으로 open 키워드가 추가되게 된다.</li>\n<li><strong>Spring Boot 2.x 버전부터는 CGLIB Proxy 방식으로 Bean 을 관리하는데,  CGLIB Proxy 는 Target Class 를 상속받아 생성하기 때문에\nopen 으로 상속이 가능한 상태이어야 한다. 그래서 all-open 플러그인이 필요하다.</strong></li>\n</ul>\n</li>\n<li>\n<p>plugins.jpa</p>\n<ul>\n<li>위에서 언급한 것처럼 @Entity, @Embeddable, @MappedSuperClass 어노테이션을 사용하면 <em>no-arg</em>생성자(기본생성자)가 자동으로 생성된다.</li>\n<li><strong>Hibernate 는 Reflection 으로 객체를 생성하기 때문에 protected 이상의 생성자가 필요하다.</strong></li>\n</ul>\n</li>\n<li>\n<p>all-open JPA</p>\n<ul>\n<li>all-open 은 아래처럼 명시적으로 선언해줘야 한다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">allOpen <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">annotation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javax.persistence.Entity\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">annotation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javax.persistence.MappedSuperclass\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">annotation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javax.persistence.Embeddable\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>jpa 에서 all-open 이 필요한 이유</strong></p>\n<ul>\n<li>Lazy Loading 을 하기 위해서는 Proxy 객체이어야 하는데, kotlin 은 기본적으로 final 이기 때문에 Proxy 객체를 생성하지 못한다.</li>\n<li>그래서 all open 을 명시적으로 선언해줘서 상속이 가능하도록 해야 Proxy 객체가 만들어지고 Lazy Loading 을 사용할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><strong>똑같이 생겼지만 의미가 다른 코틀린과 자바의 코드</strong></h3>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">kotlin</th>\n<th align=\"center\">java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">T</td>\n<td align=\"center\">non-nullable</td>\n<td align=\"center\">nullable</td>\n</tr>\n<tr>\n<td align=\"center\">class</td>\n<td align=\"center\">final</td>\n<td align=\"center\">non-final</td>\n</tr>\n<tr>\n<td align=\"center\">List<T></td>\n<td align=\"center\">immutable</td>\n<td align=\"center\">mutable</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3>참조 사이트</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=wiJqu7xoH58\">PAYCO 매거진 서버 Kotlin 적용기</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ewBri47JWII&#x26;list=PLgXGHBqgT2TtGi82mCZWuhMu-nQy301ew\">어디 가서 코프링 매우 알은 체하기! : 9월 우아한테크세미나</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=RBQOlv0aRl4\">#자프링외길12년차 #코프링2개월생존기</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Ou_-DFaAUhQ\">스프링캠프 2019 [Track 1 Session 6] : Kotlin + Spring Data JPA</a></li>\n<li><a href=\"https://cheese10yun.github.io/spring-kotlin/\">Kotlin 으로 Spring 개발할 때</a></li>\n</ul>","fields":{"slug":"/kotlin-with-spring/","prefix":"2022-01-06"},"frontmatter":{"title":"코프링 일주일 공부하고 정리하는 글","category":"spring"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p>🔘 안되면 될 때 까지! 🏃 🔘</p>"}},"pageContext":{"slug":"/kotlin-with-spring/","prev":{"id":"d985c478-3a11-5753-a210-a4abaf53b0d2","fields":{"slug":"/intellij-mac-keymap/","prefix":"2021-12-29","source":"posts"},"frontmatter":{"title":"intellij mac 단축키","category":"ide"}},"next":{"id":"c38ce02a-6799-5fb8-971a-1f9f429d2f9f","fields":{"slug":"/spring-async-config/","prefix":"2022-02-06","source":"posts"},"frontmatter":{"title":"스프링 Async multi config 설정하기","category":"spring"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}