{"componentChunkName":"component---src-templates-post-template-js","path":"/docker-compose-manual/","result":{"data":{"post":{"id":"c5aefe97-c4a5-52a5-92da-87b135d82754","html":"<h3>Docker Compose</h3>\n<ul>\n<li>여러 컨테이너를 모아서 관리하기 위한 툴</li>\n<li>docker-compose.yml 파일에 컨테이너의 구성 정보를 정의함으로써 동일 호스트상의 여러 컨테이너를 일괄적으로 관리 할 수 있다.</li>\n<li>yml 파일에 기술하는 version 은 docker engine 버전에 따라 달라진다.</li>\n</ul>\n<h3>이미지 지정(image)</h3>\n<ul>\n<li>Docker 컨테이너의 바탕이 되는 베이스 이미지를 지정할 때 사용 한다. image 에는 이미지의 이름 또는 이미지 ID 중 하나를 지정한다.</li>\n<li>베이스 이미지는 로컬 환경에 있으면 그것을 사용하고, 로컬 환경에 없으면 Docker Hub 로부터 자동으로 다운로드 한다.</li>\n<li>이미지의 태그를 지정하지 않은 경우는 최신 버전(latest)이 다운로드 된다.</li>\n</ul>\n<h3>이미지 빌드(build)</h3>\n<ul>\n<li>이미지의 작성을 Dockerfile 에 기술 하고 그것을 자동으로 빌드하여 베이스 이미지로 지정할 때는 build 를 지정한다. build 에는 Dockerfile 의 파일 경로를 지정 한다.</li>\n<li>Docker 이미지를 빌드할 때에 인수를 args 로 지정할 수 있다. bool 연산자를 사용하는 경우는 따옴표로 둘러싸야 한다.</li>\n<li>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">services:\n    webserver:\n        build:\n            args:\n                projectno: 1\n                user: asa</code></pre></div>\n</li>\n</ul>\n<h3>컨테이너 안에서 작동하는 명령 지정(command/entrypoint)</h3>\n<ul>\n<li>베이스 이미지에 지정되어 있을 때는 그 명령을 덮어쓴다.</li>\n</ul>\n<h3>컨테이너 간 연결(links)</h3>\n<ul>\n<li>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">links:\n    - logserver\n    - logserver:1og01</code></pre></div>\n</li>\n</ul>\n<h3>컨테이너 간 통신(ports/expose)</h3>\n<ul>\n<li>컨테이너가 공개하는 포트는 ports 로 지정한다.</li>\n<li>‘호스트 머신의 포트 번호:컨테이너의 포트 번호’를 지정하거나, 컨테이너의 포트 번호만 지정한다. 또한 컨테이너의 포트 번호만 지정한 경우는 호스트 머신의 포트는 랜덤한 값으로 설정된다.</li>\n<li>YAML은 xx:yy 형식을 시간으로 해석하므로 포트 번호를 설정할 때는 반드시 겹따옴표로 둘러싸서 문자열을 정의해야 한다.</li>\n<li>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">ports:\n    - \"3000\"\n    - \"8000:8000\"\n    - \"49100:22\"\n    - \"127.0.0.1:8001:8001\"</code></pre></div>\n</li>\n<li>호스트 머신에 대한 포트를 공개하지 않고 링크 기능을 사용하여 연결하는 컨테이너에게만 포트를 공개할 때는 <strong>expose</strong>를 지정한다.</li>\n</ul>\n<h3>서비스의 의존관계 정의(depends_on)</h3>\n<ul>\n<li>컨테이너의 시작 순서만 제어할 뿐 컨테이너상의 애플리케이션이 이용 가능해 질 때까지 기다리고 제어를 하지 않는다.</li>\n<li>의존관계에 있는 데이터베이스 서비스의 준비가 끝날 때까지 기다리는 것은 아니기 때문에 애플리케이션 측에서 이에 대한 대책을 세워야 한다.</li>\n</ul>\n<h3>컨테이너 환경변수 지정(environment/env_file)</h3>\n<ul>\n<li>배열 형식 또는 해시 형식으로 지정 가능</li>\n<li>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># 배열 형식으로 지정</span>\nenvironment:\n    - HOGE=fuga\n    - FOO\n<span class=\"token comment\"># 해시 형식으로 지정</span>\nenvironment :\n    HOGE: fuga\n    FOO:</code></pre></div>\n</li>\n<li>\n<p>설정할 변수가 많을 경우에는 파일을 지정 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">HOGE-fuga\nFOO=bar</code></pre></div>\n</li>\n<li>\n<p>위의 내용을 yml 파일에 다음과 같이 기술한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">env_file : envfile명</code></pre></div>\n</li>\n<li>\n<p>파일명을 여러개 지정할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">env_file:\n    - ./envfile1\n    - ./app/envfile2\n    - /tmp/envfile3</code></pre></div>\n</li>\n</ul>\n<h3>컨테이너 데이터 관리(volumes/volumes_from)</h3>\n<ul>\n<li>컨테이너에 볼륨을 마운트할 때 사용한다.</li>\n<li>호스트 측에서 마운트할 경로를 지정하려면 호스트의 디렉토리 경로:컨테이너의 디렉토리 경로를 지정한다.</li>\n<li>\n<p>볼륨 지정 뒤에 <strong>ro</strong>를 지정하면 볼륨을 읽기 전용으로 마운트 할 수 있다. 설정 파일이 저장된 볼륨 등과 같이 쓰기를 금지하고 싶은 경우에 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">volumes:\n    - ~/configs:/etc/configs/:ro</code></pre></div>\n</li>\n<li>다른 컨테이너로부터 모든 볼륨을 마운트 할 때는 volumes_from에 컨테이너명을 지정한다.</li>\n</ul>\n<h3>Docker Compose 의 주요 서브 명령</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">서브 명령</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">up</td>\n<td align=\"left\">컨테이너 생성/시작</td>\n</tr>\n<tr>\n<td align=\"left\">ps</td>\n<td align=\"left\">컨테이너 목록 표시</td>\n</tr>\n<tr>\n<td align=\"left\">logs</td>\n<td align=\"left\">컨테이너 로그 출력</td>\n</tr>\n<tr>\n<td align=\"left\">run</td>\n<td align=\"left\">컨테이너 실행</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">컨테이너 시작</td>\n</tr>\n<tr>\n<td align=\"left\">stop</td>\n<td align=\"left\">컨테이너 정지</td>\n</tr>\n<tr>\n<td align=\"left\">restart</td>\n<td align=\"left\">컨테이너 재시작</td>\n</tr>\n<tr>\n<td align=\"left\">pause</td>\n<td align=\"left\">컨테이너 일시 정지</td>\n</tr>\n<tr>\n<td align=\"left\">unpause</td>\n<td align=\"left\">컨테이너 재개</td>\n</tr>\n<tr>\n<td align=\"left\">port</td>\n<td align=\"left\">공개 포트 번호 표시</td>\n</tr>\n<tr>\n<td align=\"left\">config</td>\n<td align=\"left\">구성 확인</td>\n</tr>\n<tr>\n<td align=\"left\">kill</td>\n<td align=\"left\">실행 중인 컨테이너 강제 정지</td>\n</tr>\n<tr>\n<td align=\"left\">rm</td>\n<td align=\"left\">컨테이너 삭제</td>\n</tr>\n<tr>\n<td align=\"left\">down</td>\n<td align=\"left\">리소스 삭제</td>\n</tr>\n</tbody>\n</table>\n<h4>여러 컨테이너 생성(up)</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up <span class=\"token punctuation\">[</span>옵션<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>서비스명 .<span class=\"token punctuation\">]</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"left\">옵션</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">-d</td>\n<td align=\"left\">백그라운드에서 실행한다.</td>\n</tr>\n<tr>\n<td align=\"left\">--no-deps</td>\n<td align=\"left\">링크 서비스를 시작하지 않는다.</td>\n</tr>\n<tr>\n<td align=\"left\">--build</td>\n<td align=\"left\">이미지를 빌드 한다.</td>\n</tr>\n<tr>\n<td align=\"left\">--no-build</td>\n<td align=\"left\">이미지를 빌드하지 않는다.</td>\n</tr>\n<tr>\n<td align=\"left\">-t, --timeout</td>\n<td align=\"left\">컨테이너의 타임아웃을 초로 지정(기본10초)한다.</td>\n</tr>\n<tr>\n<td align=\"left\">--scale SERVICE=서비스 수</td>\n<td align=\"left\">서비스 수를 지정한다.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>작성한 docker-compose.yml을 바탕으로 여러 개의 컨테이너를 생성하여 시작할 때 쓰는 명령어</li>\n<li>\n<p>예를 들어 yml 파일에 server<em>a와 server</em>b라는 2개의 정의가 있고, server<em>a의 컨테이너를 10개, server</em>b의 컨테이너를 20개 시작시킬 때 다음과 같이 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up --scale <span class=\"token assign-left variable\">server_a</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> --scale <span class=\"token assign-left variable\">server_b</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></code></pre></div>\n</li>\n</ul>\n<h4>여러 리소스의 일괄 삭제(down)</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose down <span class=\"token punctuation\">[</span>옵션<span class=\"token punctuation\">]</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"left\">옵션</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">--rmi all</td>\n<td align=\"left\">모든 이미지를 삭제</td>\n</tr>\n<tr>\n<td align=\"left\">--rmi local</td>\n<td align=\"left\">커스텀 태그가 없는 이미지만 삭제</td>\n</tr>\n<tr>\n<td align=\"left\">-v, --volumes</td>\n<td align=\"left\">Compose 정의 파일의 데이터 볼륨을 삭제</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>compose 정의 파일을 바탕으로 docker-compose up 명령으로 생성한 컨테이너나 Docker 이미지를 모아서 삭제할 때 사용하는 명령어</li>\n<li>실행중인 컨테이너를 정지시키고, Docker 이미지, 네트워크, 데이터 볼륨을 일괄적으로 삭제한다.</li>\n</ul>","fields":{"slug":"/docker-compose-manual/","prefix":"2020-08-27"},"frontmatter":{"title":"Docker Compose 작성 방법 및 명령어 정리","category":"infra"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p><strong>OpenSesame</strong></p>\n<ul>\n<li>안되면 될 때 까지!</li>\n<li>무분별한 정보 보다는 정확한 정보를 전달하도록 노력하기.</li>\n</ul>"}},"pageContext":{"slug":"/docker-compose-manual/","prev":{"id":"e4cf86b2-71ef-5164-8957-83b244290cfe","fields":{"slug":"/dockerfile-manual/","prefix":"2020-08-20","source":"posts"},"frontmatter":{"title":"Dockerfile 작성 방법 정리","category":"infra"}},"next":{"id":"2d243669-0777-5ead-a020-ce803b491a56","fields":{"slug":"/docker-compose-use/","prefix":"2020-10-13","source":"posts"},"frontmatter":{"title":"docker 로 개발환경 구성하기","category":"infra"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}