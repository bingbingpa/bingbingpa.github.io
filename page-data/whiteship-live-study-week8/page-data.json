{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week8/","result":{"data":{"post":{"id":"f88106f5-a7e3-5760-9f40-d085577f8158","html":"<h2>whiteship/live-study 8주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/8\">자바의 인터페이스에 대해 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것 (필수)</p>\n<ul>\n<li>인터페이스 정의하는 방법</li>\n<li>인터페이스 구현하는 방법</li>\n<li>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</li>\n<li>인터페이스 상속</li>\n<li>인터페이스의 기본 메소드 (Default Method), 자바 8</li>\n<li>인터페이스의 static 메소드, 자바 8</li>\n<li>인터페이스의 private 메소드, 자바 9</li>\n</ul>\n</li>\n</ul>\n<h3>1. 인터페이스 정의하는 방법</h3>\n<ul>\n<li>인터페이스의 모든 메소드는 추상적이다.</li>\n<li>인터페이스는 공용 API 를 정의하기 때문에 암시적으로 <strong>public</strong> 이므로 public 키워드는 생략하는 것이 일반적이다.</li>\n<li>인스턴스 필드를 정의할 수 없다.(필드는 구현의 세부사항이고 인터페이스는 구현이 아니라 사양이다.)</li>\n<li>인터페이스는 인스턴스화 할수 없으므로 생성자가 필요 없다.</li>\n<li>인터페이스는 중첩될 수 있다.</li>\n<li><strong>java 8</strong>부터 인터페이스에 <strong>static</strong> 메소드를 정의할 수 있다.</li>\n<li><strong>java 8</strong>부터 인터페이스에 <strong>default</strong> 메소드를 정의할 수 있다.</li>\n<li><strong>java 9</strong>부터 인터페이스에 <strong>private</strong> 메소드를 정의할 수 있다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>2. 인터페이스 구현하는 방법</h3>\n<ul>\n<li>상속에 <strong>extends</strong> 키워드를 사용했다면, 인터페이스는 <strong>implements</strong> 키워드를 사용한다.</li>\n<li>상속은 부모의 기능들을 재사용하는 개념이라면, 인터페이스는 공통의 기능들을 정의하고 이를 구현하는 클래스에서 해당 기능들을 필수적으로 <strong>Override</strong> 하여 구현해야 한다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"고양이\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>3. 인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</h3>\n<ul>\n<li>인터페이스는 구현체를 통해서 인스턴스 생성이 가능하다.</li>\n<li>구현체를 통해 인스턴스를 생성할때 인터페이스 타입으로도 생성이 가능하다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Animal</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>4. 인터페이스 상속</h3>\n<ul>\n<li>인터페이스는 다른 인터페이스를 상속(확장) 할 수 있으며, 클래스가 다른 클래스를 상속하는 것과 동일하게 <strong>extends</strong> 키워드를 사용하여 인터페이스를 상속할 수 있다.</li>\n<li><strong>인터페이스는 클래스와 다르게 여러 인터페이스를 상속 할 수 있다.</strong></li>\n<li>\n<p>부모 인터페이스의 모든 메소드와 상수를 상속하고 새 메소드와 상수를 정의 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PrintableAnimal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 구현 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Puppy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PrintableAnimal</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Animal 인터페이스 메소드 구현</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"강아지\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Animal 인터페이스 메소드 구현</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// PrintableAnimal 인터페이스 메소드 구현</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이름 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다리개수 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>5. 인터페이스의 기본 메소드 (Default Method), 자바8</h3>\n<ul>\n<li><strong>default method 는 java8 부터 사용 가능하다.</strong></li>\n<li>인터페이스가 <strong>default</strong> 키워드로 선언되면 메소드를 구현할 수 있고, 이를 구현하는 클래스는 default 메소드를 오버라이딩 할 수 있다.</li>\n<li><strong>implements 한 인터페이스의 default 메소드를 사용하려면 상속한인터페이스.super.메소드명</strong> 으로 사용할 수 있다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PrintableAnimal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이름 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다리개수 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>6. 인터페이스의 static 메소드, 자바 8</h3>\n<ul>\n<li><strong>static method 는 java8 부터 사용 가능하다.</strong></li>\n<li><strong>static 메소드 이므로 상속이 불가능하다.</strong></li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PrintableAnimal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"출력기능이 있는 동물 인터페이스\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrintableAnimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>7. 인터페이스의 private 메소드, 자바 9</h3>\n<ul>\n<li><strong>private method 는 java9 부터 사용 가능하다.</strong></li>\n<li>private 메소드 이기 때문에 인터페이스에서 구현이 되어 있어야 한다.</li>\n<li>구현체에서 구현할 수 없고, 자식 인터페이스에서도 상속이 불가능하다.</li>\n<li>static 메소드도 private 로 쓸 수 있다.</li>\n</ul>\n<h3>8. Constant Interface</h3>\n<ul>\n<li><strong>Constant Interface 는 오직 상수만 정의한 인터페이스로 사용을 추천하지 않는 Anti 패턴이다.</strong></li>\n<li>인터페이스에서 변수를 등록할 때 자동으로 public static final 이 붙어서 상수처럼 어디에서나 접근할 수 있다.\n또한 하나의 클래스에 여러 개의 인터페이스를 implement 할 수 있는데, Constant Interface 를 implement 할 경우, 인터페이스의 클래스명을 네임스페이스로 붙이지 않고 바로 사용할 수 있다.</li>\n<li>\n<p>사용을 추천하지 않는 이유</p>\n<ul>\n<li>사용하지 않을 수도 있는 상수를 포함하여 모두 가져오기 때문에 불필요한 것들을 계속 가지고 있어야 한다.</li>\n<li>컴파일 할 때 사용되겠지만, 런타임에는 사용할 용도가 없다.</li>\n<li>Binary Code Compatibility (이진 호환성)을 필요로 하는 프로그램의 경우, 새로운 라이브러리를 연결하더라도 상수 인터페이스는 프로그램이 종료되기 전까지 이진 호환성을 보장하기 위해 계속 유지되어야 한다.</li>\n<li>IDE 가 없으면, 상수 인터페이스를 Implement 한 클래스에서는 상수를 사용할 때 네임스페이스를 사용하지 않으므로, 해당 상수의 출처를 쉽게 알 수 없다. 또한 상수 인터페이스를 구현한 클래스의 하위 클래스들의 네임스페이스도 인터페이스의 상수들로 오염된다.</li>\n<li>인터페이스를 구현해 클래스를 만든다는 것은, 해당 클래스의 객체로 어떤 일을 할 수 있는지 클라이언트에게 알리는 행위이다. 상수 인터페이스를 구현한다는 사실은 클라이언트에게는 중요한 정보가 아니다. 단지 클라이언트들을 혼란에 빠트릴 뿐이다.</li>\n<li>상수 인터페이스를 Implement 한 클래스에 같은 상수를 가질 경우, 클래스에 정의한 상수가 사용되므로 사용자가 의도한 흐름으로 프로그램이 돌아가지 않을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3>9. 인터페이스 vs 추상클래스</h3>\n<ul>\n<li>\n<p>java8 부터 default method, static method 가 사용가능하게 되었고, java9 부터는 private method 도 인터페이스가 사용가능하게 되었다. 그렇다면 인터페이스와 추상클래스가\n큰 차이가 없어 보이는데 어떤 것을 사용해야 할까?</p>\n<ul>\n<li>추상 클래스에서는 private 변수를 선언하고 상태 정보를 가질 수 있다. 즉 어떠한 상태 정보 같은 것이 필요할 경우에는 추상 클래스를 사용한다.</li>\n</ul>\n</li>\n<li><strong>느슨한 결합을 유지하게 위해 인터페이스를 구현한 클래스를 사용할때에는 인터페이스 타입을 사용해야 한다.</strong></li>\n</ul>\n<h3>참조링크</h3>\n<ul>\n<li><a href=\"https://blog.baesangwoo.dev/posts/java-livestudy-8week/\">https://blog.baesangwoo.dev/posts/java-livestudy-8week/</a></li>\n<li><a href=\"https://yadon079.github.io/2021/java%20study%20halle/week-08\">https://yadon079.github.io/2021/java%20study%20halle/week-08</a></li>\n</ul>","fields":{"slug":"/whiteship-live-study-week8/","prefix":"2021-01-09"},"frontmatter":{"title":"자바 인터페이스","category":"java"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p><strong>OpenSesame</strong></p>\n<ul>\n<li>안되면 될 때 까지!</li>\n<li>무분별한 정보 보다는 정확한 정보를 전달하도록 노력하기.</li>\n</ul>"}},"pageContext":{"slug":"/whiteship-live-study-week8/","prev":{"id":"b7b34d9c-c08c-50c8-a06f-88ed9e8d1c36","fields":{"slug":"/whiteship-live-study-week7/","prefix":"2021-01-08","source":"posts"},"frontmatter":{"title":"자바 패키지","category":"java"}},"next":{"id":"613666e1-aac2-50c1-a885-82eaef6d0362","fields":{"slug":"/java-reflection-api/","prefix":"2021-01-10","source":"posts"},"frontmatter":{"title":"자바 reflection API","category":"java"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}