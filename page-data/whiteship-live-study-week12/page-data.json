{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week12/","result":{"data":{"post":{"id":"2b315a3a-785c-5f42-85b1-6775f6ec2817","html":"<h2>whiteship/live-study 12주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/12\">자바의 애노테이션에 대해 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것 (필수)</p>\n<ul>\n<li>애노테이션 정의하는 방법</li>\n<li>@retention</li>\n<li>@target</li>\n<li>@documented</li>\n<li>애노테이션 프로세서</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>1. 애노테이션 정의하는 방법</h3>\n<ul>\n<li>\n<p>애노태이션</p>\n<ul>\n<li>Java 5 부터 등장한 기능</li>\n<li>본래 주석이라는 뜻으로, 인터페이스를 기반으로 한 문법이며, 주석과는 그 역할이 다르지만 주석처럼 코드에 달아 클래스에 특별한 의미를 부여하거나 기능을 주입할 수 있다.</li>\n<li>해석되는 시점을 정할 수도 있다.(Retention policy)</li>\n</ul>\n</li>\n<li>\n<p>정의하는 방법</p>\n<ul>\n<li>\n<p>인터페이스에 @ 를 붙여주면 애노테이션으로 쓸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Inherited</span> <span class=\"token comment\">// 상속이 되는 어노테이션이 되도록 설정한다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// default 값을 안줄 경우 해당 어노테이션을 사용하는 곳에서 값들을 줘야한다.</span>\n<span class=\"token comment\">// @MyAnnotaion(name =\"bibibi\", number=10) 과 같은 형태로 선언된 필드에 대한 값을 줘야 한다.</span>\n<span class=\"token comment\">// 하나의 필드를 선언할 때 value() 라고 주면 어노테이션을 사용하는 곳에서 @MyAnnotation(name=\"test\"), 대신 @MyAnnotation(\"test\") 과 같은 형태로 필드이름을 생략 할 수 있다.자</span>\n<span class=\"token comment\">// 여러개의 필드를 선언할때는 하나의 필드를 value() 라고 쓰더라도 모두 써줘야한다.</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"shpark\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span>  <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>2. @retention</h3>\n<ul>\n<li>\n<p>어느 시점까지 어노테이션의 메모리를 가져갈 지 설정한다.</p>\n<ul>\n<li>SOURCE: 애노테이션을 사실상 주석처럼 사용한다. 컴파일러가 컴파일할 때 해당 애노테이션의 메모리를 버린다.</li>\n<li>CLASS: 컴파일러가 컴파일에서는 애노테이션의 메모리를 가져가지만 실질적으로 런타임시에는 사라지게 된다.\n런타임시에 사라진다는 것은 리플렉션으로 선언된 애노테이션 데이터를 가져올 수 없게 된다는 것을 뜻한다.</li>\n<li>RUNTIME: 애노테이션을 런타임시에까지 사용할 수 있다. JVM 이 자바 바이트코드가 남긴 class 파일에서 런타임 환경을 구성하고 런타임을 종료할 때까지 메모리는 살아 있다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>3. @target</h3>\n<ul>\n<li>\n<p>애노테이션을 적용할 수 있는 대상(위치) 를 나타낸다. 만약, Target 에 선언된 대상과 다른 대상에 애노테이션을 적용할 경우 컴파일 에러가 발생한다.</p>\n<ul>\n<li>TYPE:  class, interface, annotation, enum 에만 적용 가능</li>\n<li>FIELD: 필드, enum 상수에만 적용 가능</li>\n<li>METHOD: 메소드에만 적용 가능</li>\n<li>PARAMETER: 파라미터에만 적용가능</li>\n<li>CONSTRUCTOR: 생성자에만 적용 가능</li>\n<li>LOCAL_VARIABLE: 지역 변수에만 적용 가능</li>\n<li>ANNOTATION_TYPE: 애노테이션에만 적용 가능</li>\n<li>PACKAGE: 패키지에만 적용 가능</li>\n<li>TYPE_PARAMETER: 자바 8부터 추가 되었으며, 타입 파라미터(T,E 와 같은)에만 적용 가능</li>\n<li>TYPE_USE: 자바 8부터 추가되었으며, (JLS 의 15가지 타입)[https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.11]과 타입 파라미터에 적용 가능</li>\n<li>MODULE: 모듈에만 적용 가능</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>4. @documented</h3>\n<ul>\n<li>javadoc 으로 api 문서를 만들 때 어노테이션에 대한 설명도 포함하도록 지정</li>\n</ul>\n<br>\n<h3>5. 애노테이션 프로세서</h3>\n<ul>\n<li>컴파일 타임에 애노테이션 정보를 참고하여 코드를 분석하고 생성하는 등의 작업을 할 수 있는 기능으로, 스프링의 의존성 주입을 예로 들 수 있다.</li>\n</ul>","fields":{"slug":"/whiteship-live-study-week12/","prefix":"2021-02-01"},"frontmatter":{"title":"자바 애노테이션","category":"whiteship-live-study"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p>🔘 안되면 될 때 까지! 🏃 🔘</p>"}},"pageContext":{"slug":"/whiteship-live-study-week12/","prev":{"id":"7fa050b7-0f17-55c7-938a-e50b04c93d4f","fields":{"slug":"/whiteship-live-study-week11/","prefix":"2021-01-26","source":"posts"},"frontmatter":{"title":"자바 열거형","category":"whiteship-live-study"}},"next":{"id":"c3af7c84-a818-5c42-b0ab-368a324bbb06","fields":{"slug":"/whiteship-live-study-week13/","prefix":"2021-02-11","source":"posts"},"frontmatter":{"title":"자바 I/O","category":"whiteship-live-study"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}