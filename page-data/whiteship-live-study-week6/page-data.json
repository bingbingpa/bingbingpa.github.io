{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week6/","result":{"data":{"post":{"id":"d51eab76-94a8-5eac-b11f-cef1e10d7ac3","html":"<h2>whiteship/live-study 6주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/6\">자바의 상속에 대해 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것 (필수)</p>\n<ul>\n<li>자바 상속의 특징</li>\n<li>super 키워드</li>\n<li>메소드 오버라이딩</li>\n<li>다이나믹 메소드 디스패치 (Dynamic Method Dispatch)</li>\n<li>추상 클래스</li>\n<li>final 키워드</li>\n<li>Object 클래스</li>\n</ul>\n</li>\n</ul>\n<h3>1. 자바 상속의 특징</h3>\n<ul>\n<li>\n<p>상속이란</p>\n<ul>\n<li><strong>부모클래스의 변수와 메소드를 무려받는 것</strong>으로, 상속을 통해 코드의 재사용성을 통해 코드의 간결성을 확보할 수 있다.</li>\n<li>상속을 받으면 부모클래스의 변수와 메소드를 가져다 쓸 수 있지만, 접근제어자에 따라 상속하여도 사용할 수 없는 변수 및 메소드들도 있다.</li>\n<li>\n<p>상속은 extends 라는 키워드를 사용해서 이루어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> 자식클래스명 <span class=\"token keyword\">extends</span> 부모클래스명 <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>상속의 특징</p>\n<ul>\n<li>\n<p>자바에서의 상속은 단일 상속만 가능하다. 아래의 형태와 같은 다중 상속은 불가능 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> 자식클래스명 <span class=\"token keyword\">extends</span> 부모클래스명<span class=\"token punctuation\">,</span> 다른부모클래스명 <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>자바의 계층 구조 최상위에는 java.lang.Object 클래스가 존재한다. 모든 클래스는 별도로 상속을 받지 않더라고 기본적으로 Object 클래스를 상속 받는다.</li>\n<li>부모의 메소드와 변수만 상속되며, 생성자는 상속되지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h3>2. super 키워드</h3>\n<ul>\n<li>\n<p>자식클래스가 부모클래스로부터 상속받은 멤버를 사용하고자 할때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">childMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>부모 클래스의 생성자를 호출할 때 사용할 수 있다.</li>\n</ul>\n<h3>3. 메소드 오버라이딩과 오버로드</h3>\n<ul>\n<li>\n<p>메소드 오버라이딩</p>\n<ul>\n<li><strong>부모 클래스로부터 상속받은 메소드를 자식 클래스에서 재정의 하는것.</strong></li>\n<li>\n<p>자식 클래스에서는 오버라이딩 하고자 하는 <strong>메소드의 이름, 매개변수, 리턴타입이 모두 같아야 한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"부모 클래스\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"자식 클래\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>메소드 오버로드</p>\n<ul>\n<li>한 클래스 내에 이미 사용하려는 이름과 같은 이름을 가진 메소드가 있더라도 <strong>매개변수의 개수 또는 타입이 다르면, 같음 이름을 사용해서 메소드를 정의할 수 있다.</strong></li>\n<li>\n<p>리턴값만 다른 것은 오버로딩 할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OverloadingMethods</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오버로딩1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">String</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오버로딩2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오버로딩3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">String</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오버로딩4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>오버로딩 vs 오버라이딩</p>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">overriding</th>\n<th align=\"center\">overloading</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">리턴형</td>\n<td align=\"center\">동일해야 한다.</td>\n<td align=\"center\">달라도 된다.</td>\n</tr>\n<tr>\n<td align=\"center\">메소드형</td>\n<td align=\"center\">동일해야 한다.</td>\n<td align=\"center\">동일해야 한다.</td>\n</tr>\n<tr>\n<td align=\"center\">메소드명</td>\n<td align=\"center\">동일해야 한다.</td>\n<td align=\"center\">동일해야 한다.</td>\n</tr>\n<tr>\n<td align=\"center\">매개변수</td>\n<td align=\"center\">동일해야 한다.</td>\n<td align=\"center\">달라야만 한다.</td>\n</tr>\n<tr>\n<td align=\"center\">적용범위</td>\n<td align=\"center\"><strong>상속관계</strong>에서 적용된다.</td>\n<td align=\"center\"><strong>같은 클래스</strong>내에서 적용된다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h3>4. 다이나믹 메소드 디스패치 (Dynamic Method Dispatch)</h3>\n<ul>\n<li>메소드 디스패치란 어떤 메소드를 호출할지 결정하여 실제로 실행시키는 과정이다.</li>\n<li>자바는 런타임 시 객체를 생성하고, 컴파일 시에는 생성할 객체 타입에 대한 정보만 공유한다.</li>\n<li>\n<p>스태틱 메소드 디스패치(Static Method Dispatch)</p>\n<ul>\n<li>\n<p>구현 클래스를 통해 컴파일 시점에 컴파일러가 어떤 메소드를 호출할지 명확하게 알고 있는 경우.</p>\n<ul>\n<li>메소드를 오버로딩하면 매개변수 타입과 갯수에 따라 어떤 메소드를 호출할지 알 수 있는 경우.</li>\n<li>\n<p>상위 클래스가 있더라도 하위 클래스(구현 클래스)로 선언을 하고 하위 클래스의 인스턴스를 생성하는 경우.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethodDispatch</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스태틱 메소드 디스패치1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스태틱 메소드 디스패치2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethodDispatchMain</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token class-name\">StaticMethodDispatch</span><span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">StaticMethodDispatch</span> staticMethodDispatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticMethodDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      staticMethodDispatch<span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      staticMethodDispatch<span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스태틱 메소드 디스패치3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>다이나믹 메소드 디스패치(Dynamic Method Dispatch)</p>\n<ul>\n<li>\n<p>수퍼클래스의 메서드를 오버라이딩 하거나, 인터페이스나 추상 클래스에 정의된 추상 메소드를 호출하는 경우로, 호출되는 메소드가 런타임 시 동적으로 결정되는 것.</p>\n<ul>\n<li>인터페이스 또는 추상 클래스로 선언하고 구현/상속 받은 하위 클래스의 인스턴스를 생성하는 것.</li>\n<li>\n<p>컴파일러가 알고 있는 타입에 대한 정보를 토대로 런타임 시 해당 타입의 객체를 생성하고 메소드를 호출하는 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent 의 메소드\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child1</span> <span class=\"token keyword\">extends</span>  <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Child1 의 메소드\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child2</span> <span class=\"token keyword\">extends</span>  <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Child2 의 메소드\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DispatchInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatchImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DispatchInterface</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"DispatchImpl 의 메소드\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicMethodDispatch</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Parent</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Parent</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">DispatchInterface</span> impl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatchImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      p1<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p2<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      impl<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>5. 추상 클래스</h3>\n<ul>\n<li>클래스를 만들기 위한 일종의 설계도로 <strong>인스턴스를 생성할 수 없는 클래스이다.</strong> 이를 사용하기 위해서는 반드시 자식 클래스에서 상속을 받아 클래스를 모두 구현해야 한다.</li>\n<li>\n<p>반드시 하나 이상의 추상 세더르를 포함하고 있어야 하고, 생성자와 멤버변수, 일반메서드 모두를 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 클래스이름 <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>6. final 키워드</h3>\n<ul>\n<li>\n<p>final 키워드는 초기화를 한번만 한다는 의미로 총 세가지 의미로 사용된다.</p>\n<ul>\n<li>final 변수 : 보통 상수를 의미한다. 생성자나 대입연산자를 통해 한번만 초기화 가능한 변수이다.</li>\n<li>final 메소드 : 오버라이드하거나 숨길 수 없다.</li>\n<li>final 클래스 : 해당 클래스는 상속할 수 없음을 의미하며, 상속을 할 수 없기 때문에 상속 계층에서 마지막 클래스라는 의미이다.</li>\n</ul>\n</li>\n</ul>\n<h3>7. Object 클래스</h3>\n<ul>\n<li>\n<p>java.lang.Object 클래스는 <strong>모든 클래스의 최상위 클래스이다.</strong></p>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메소드</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">boolean equals(Object obj)</td>\n<td align=\"left\">두 객체가 같은 지 비교한다.(같으면 true, 틀리면 false)</td>\n</tr>\n<tr>\n<td align=\"left\">String toString()</td>\n<td align=\"left\">객체의 문자열을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">protected Object clone()</td>\n<td align=\"left\">객체를 복사한다.</td>\n</tr>\n<tr>\n<td align=\"left\">protected void finalize()</td>\n<td align=\"left\">가비지 컬렉션 직전에 객체의 리소르를 정리할 때 호출한다.</td>\n</tr>\n<tr>\n<td align=\"left\">Class getClass()</td>\n<td align=\"left\">객체의 클래스형을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">int hashCode()</td>\n<td align=\"left\">객체의 코드값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">void notify()</td>\n<td align=\"left\">wait 된 스레드 실행을 재개할 때 호출한다.</td>\n</tr>\n<tr>\n<td align=\"left\">void notifyAll()</td>\n<td align=\"left\">wait 된 모든 스레드 실행을 재개할 때 호출한다.</td>\n</tr>\n<tr>\n<td align=\"left\">void wait()</td>\n<td align=\"left\">스레드를 일시적으로 중지할 때 호출한다.</td>\n</tr>\n<tr>\n<td align=\"left\">void wait(long timeout)</td>\n<td align=\"left\">주어진 시간만큼 스레드를 일시적으로 중지할 때 호출한다.</td>\n</tr>\n<tr>\n<td align=\"left\">void wait(long timeout, int nanos)</td>\n<td align=\"left\">주어진 시간만큼 스레드를 일시적으로 중지할 때 호출한다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h3>참조 링크</h3>\n<ul>\n<li><a href=\"https://blog.naver.com/swoh1227/222181505425\">https://blog.naver.com/swoh1227/222181505425</a></li>\n<li><a href=\"https://blog.naver.com/sejonghumble/222183439699\">https://blog.naver.com/sejonghumble/222183439699</a></li>\n<li><a href=\"https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md\">https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md</a></li>\n</ul>","fields":{"slug":"/whiteship-live-study-week6/","prefix":"2021-01-03"},"frontmatter":{"title":"자바 상속","category":"whiteship-live-study"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p>🔘 안되면 될 때 까지! 🏃 🔘</p>"}},"pageContext":{"slug":"/whiteship-live-study-week6/","prev":{"id":"c78c9d3b-90a0-5c5b-ab31-f48ac9cbeaf0","fields":{"slug":"/whiteship-live-study-week5/","prefix":"2020-12-30","source":"posts"},"frontmatter":{"title":"자바 클래스","category":"whiteship-live-study"}},"next":{"id":"9854523c-d222-52f1-af71-1f3d5ffe47b7","fields":{"slug":"/intellij-start-error/","prefix":"2021-01-05","source":"posts"},"frontmatter":{"title":"Intellij 시작 오류 조치","category":"ide"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}