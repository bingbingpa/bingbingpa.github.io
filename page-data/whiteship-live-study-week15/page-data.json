{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week15/","result":{"data":{"post":{"id":"f803d163-3067-5894-92de-b76185c50ba3","html":"<h2>whiteship/live-study 15주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/15\">자바의 람다식에 대해 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것 (필수)</p>\n<ul>\n<li>람다식 사용법</li>\n<li>함수형 인터페이스</li>\n<li>Variable Capture</li>\n<li>메소드, 생성자 레퍼런스</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>1. 람다식 사용법</h3>\n<ul>\n<li>람다 표현식은 익명 클래스를 단순화하여 그 표현식을 메서드의 인수로 전달하거나 인터페이스의 객체를 생성할 수 있는 기능을 제공한다.</li>\n<li>\n<p>람다 표현식을 사용하지 않은 방식의 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>람다 표현식으로 전환하기</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Lambda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>람다 표현식의 상세 문법</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">유형</th>\n<th align=\"left\">예제</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">파라미터 값 소비</td>\n<td align=\"left\">(String name) -> System.out.println(name)</td>\n<td align=\"left\">- 파라미터를 전달된 값을 기반으로 데이터를 처리하고 완료한다. <br> - 리턴 타입이 void 유형이다.</td>\n</tr>\n<tr>\n<td align=\"left\">불 값 리턴</td>\n<td align=\"left\">(String value) -> “somevalue”.equals(value)</td>\n<td align=\"left\">- 파라미터를 전달된 값을 기반으로 불 값을 리턴한다. <br> - 주로 전달된 값의 유효성을 검증하거나 전달된 값들을 비교하는 작업을 한다.</td>\n</tr>\n<tr>\n<td align=\"left\">객체 생성</td>\n<td align=\"left\">() -> new SomeClass()</td>\n<td align=\"left\">- 파라미터로 전달되는 것 없이 객체를 생성하여 리턴값도 없다.</td>\n</tr>\n<tr>\n<td align=\"left\">객체 변형</td>\n<td align=\"left\">(String a) -> a.substring(0,10)</td>\n<td align=\"left\">- 파라미터로 전달된 값을 변경해서 다른 객체로 리턴한다.</td>\n</tr>\n<tr>\n<td align=\"left\">값을 조합</td>\n<td align=\"left\">(int min, int max) -> (min + max) / 2</td>\n<td align=\"left\">- 파라미터로 전달된 값을 조합해서 새로운 값을 리턴한다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<br>\n<h3>2. Variable Capture</h3>\n<ul>\n<li><strong>람다 표현식에서 외부 변수를 참조하기 위해서는 반드시 final 이거나 final 과 유사한 조건이어야 한다.</strong></li>\n<li>final 키워드를 붙이지 않더라도 값이 할당된 이후에 변경될 가능성이 없다면 컴파일러는 final 변수와 동일하게 취급하며, 람다 표현식에서 활용하더라도 컴파일 오류가 발생하지 않는다.</li>\n</ul>\n<br>\n<h3>3. 함수형 인터페이스</h3>\n<ul>\n<li><strong>람다 표현식을 쓸 수 있는 인터페이스는 오직 public 메서드 하나만 가지고 있는 인터페이스여야 한다.</strong></li>\n<li>자바8에서는 이러한 인터페이스를 특별히 <strong>함수형 인터페이스</strong>라고 부르고, 함수형 인터페이스에서 제공하는 단 하나의 추상 메서드를 <strong>함수형 메서드</strong>라고 부른다.</li>\n<li>\n<p>인터페이스에 오직 하나의 추상 메서드만 있다면 함수형 인터페이스로 인식되지만, 아래와 같이 <strong>애노테이션을 붙이면 좀 더 명확하게 함수형 인터페이스임을 알 수 있고,\n또한 실수로 함수형 인터페이스에 메서드를 추가했을 때 컴파일 에러를 일으켜서 문제를 사전에 예방할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>대표 함수형 인터페이스</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">인터페이스명</th>\n<th align=\"left\">메서드명</th>\n<th align=\"left\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Consumer<T></td>\n<td align=\"left\">void accept(T t)</td>\n<td align=\"left\">- 파라미터를 전달해서 처리한 후 결과를 리턴 받을 필요가 없을 때 사용한다.</td>\n</tr>\n<tr>\n<td align=\"left\">Function&#x3C;T,R></td>\n<td align=\"left\">R apply(T t)</td>\n<td align=\"left\">- 전달할 파라미터를 다른 값으로 변환해서 리턴할 때 사용한다. <br> - 주로 값을 변경하거나 매핑할 때 사용한다.</td>\n</tr>\n<tr>\n<td align=\"left\">Predicate<T></td>\n<td align=\"left\">boolean test(T t)</td>\n<td align=\"left\">- 전달받은 값에 대해 true/false 값을 리턴할 때 사용한다. <br> - 주로 데이터를 필터링하거나, 조건에 맞는지 여부를 확인하는 용도로 사용한다.</td>\n</tr>\n<tr>\n<td align=\"left\">Supplier<T></td>\n<td align=\"left\">T get()</td>\n<td align=\"left\">- 파라미터 없이 리턴 값만 있는 경우 사용한다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<br>\n<h3>4. 메소드, 생성자 레퍼런스</h3>\n<ul>\n<li><strong>함수룰 메서드의 파라미터로 전달하는 것을 메서드 참조라고 부른다.</strong></li>\n<li>메서드 참조의 장점은 람다 표현식과는 달리 코드를 여러 곳에서 재사용 할 수 있고 자바의 기본 제공 메서드뿐만 아니라 직접 개발한 메서드도 사용할 수 있으며, 코드의 가독성도 높일 수 있다.</li>\n<li><strong>람다 표현식도 마찬가지지만, 메서드 참조 역시 코드 자체를 전달하는 것이지 실행 결과를 전달하는 것은 아니다.</strong> 전달된 코드가 함수형 인터페이스 내부에서 실행될 때 비로소 의미 있는 데이터 결과가 나온다.</li>\n<li>\n<p>메서드 참조를 정의하는 문법 두가지</p>\n<ul>\n<li>클래스명::메서드명</li>\n<li>\n<p>객체 변수명::메서드명</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MethodReferenceExample</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MethodReferenceExample</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodReferenceExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 데이터 처리 로직 정의</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">executeMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> entity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entity <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Contents : \"</span> <span class=\"token operator\">+</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length : \"</span> <span class=\"token operator\">+</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 대문자로 변경하는 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> entity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실행하는 예</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 정적 메서드 참조</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodReferenceExample</span><span class=\"token operator\">::</span><span class=\"token function\">executeMethod</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 한정적 메서드 참조</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodReferenceExample</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 비한정적 메서드 참조</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>정적 메서드 참조</strong></p>\n<ul>\n<li>static 으로 정의한 메서드를 참조할 때 사용한다. 가장 이해하기 쉽고 사용하기 편리하다.</li>\n</ul>\n</li>\n<li>\n<p><strong>비한정적 메서드 참조</strong></p>\n<ul>\n<li>public 혹은 protected 로 정의한 메서드를 참조할 때 사용하며 static 메서드를 호출하는 것과 유사하다.</li>\n<li>스트림에서 필터와 매핑 용도로 많이 사용한다.</li>\n<li>스트림에 포함된 항목과 참조하고자 하는 객체가 반드시 일치해야 한다.</li>\n<li>람다 표현식 내부에서 생성한 객체의 메서드를 참조할 때 사용한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>한정적 메서드 참조</strong></p>\n<ul>\n<li>이미 외부에서 선언된 객체의 메서드를 호출하거나, 객체를 직접 생성해서 메서드를 참조할 때 사용한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>생성자 참조</strong></p>\n<ul>\n<li>클래스명::new</li>\n<li>\n<p>새로운 객체를 생성해서 리턴해야 하는 경우에 사용하면 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorReferenceExample</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConstructorReferenceExample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"name ======= \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Macbook\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Samsung\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dell\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 람다 표현식</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstructorReferenceExample</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstructorReferenceExample</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 생성자 참조로 변환</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstructorReferenceExample</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstructorReferenceExample</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 생성자 참조, 메서드 참조로 변환</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstructorReferenceExample</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n<h4>참조</h4>\n<ul>\n<li>Practical 모던 자바 <em>-인사이트-</em></li>\n</ul>\n<h4>작성한 코드 저장소</h4>\n<ul>\n<li><a href=\"https://github.com/bingbingpa/whiteship-live-study\">https://github.com/bingbingpa/whiteship-live-study</a></li>\n</ul>","fields":{"slug":"/whiteship-live-study-week15/","prefix":"2021-03-05"},"frontmatter":{"title":"자바 람다식","category":"whiteship-live-study"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p>🔘 안되면 될 때 까지! 🏃 🔘</p>"}},"pageContext":{"slug":"/whiteship-live-study-week15/","prev":{"id":"71db4793-8cec-5c6e-84d6-752169b09ee8","fields":{"slug":"/whiteship-live-study-week14/","prefix":"2021-02-23","source":"posts"},"frontmatter":{"title":"자바 제네릭","category":"whiteship-live-study"}},"next":{"id":"ab67e5ca-cbb6-518d-8c08-588760a2cebd","fields":{"slug":"/toby-spring-vol1-ch1/","prefix":"2021-04-19","source":"posts"},"frontmatter":{"title":"토비의 스프링 3.1(vol1) - 1장 오브젝트와 의존관계","category":"toby-spring"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}