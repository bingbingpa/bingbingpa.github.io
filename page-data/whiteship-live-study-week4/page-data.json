{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week4/","result":{"data":{"post":{"id":"26a716c2-895c-5081-81bb-937c599d1408","html":"<h2>whiteship/live-study 4주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/4\">자바가 제공하는 제어문을 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것 (필수)</p>\n<ul>\n<li>선택문</li>\n<li>반복문</li>\n</ul>\n</li>\n<li>\n<p>과제 (옵션)</p>\n<ul>\n<li>\n<p>과제 0. JUnit 5 학습하세요.</p>\n<ul>\n<li>intellij, 이클립스, VS Code 에서 JUnit 5로 테스트 코드 작성하는 방법에 익숙해 질 것.</li>\n<li>이미 JUnit 알고 계신분들은 다른 것 아무거나!</li>\n<li>더 자바, 테스트 강의도 있으니 참고하세요~</li>\n</ul>\n</li>\n<li>\n<p>과제 1. live-study 대시 보드를 만드는 코드를 작성하세요.</p>\n<ul>\n<li>깃헙 이슈 1번부터 18번까지 댓글을 순회하며 댓글을 남긴 사용자를 체크 할 것.</li>\n<li>참여율을 계산하세요. 총 18회에 중에 몇 %를 참여했는지 소숫점 두자리가지 보여줄 것.</li>\n<li><a href=\"https://github-api.kohsuke.org/\">Github 자바 라이브러리</a>를 사용하면 편리합니다.</li>\n<li>깃헙 API 를 익명으로 호출하는데 제한이 있기 때문에 본인의 깃헙 프로젝트에 이슈를 만들고 테스트를 하시면 더 자주 테스트할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>과제 2. LinkedList 를 구현하세요.</p>\n<ul>\n<li>LinkedList 에 대해 공부하세요.</li>\n<li>정수를 저장하는 ListNode 클래스를 구현하세요.</li>\n<li>ListNode add(ListNode head, ListNode nodeToAdd, int position)를 구현하세요.</li>\n<li>ListNode remove(ListNode head, int positionToRemove)를 구현하세요.</li>\n<li>boolean contains(ListNode head, ListNode nodeToCheck)를 구현하세요.</li>\n</ul>\n</li>\n<li>\n<p>과제 3. Stack 을 구현하세요.</p>\n<ul>\n<li>int 배열을 사용해서 정수를 저장하는 Stack 을 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n</li>\n<li>\n<p>과제 4. 앞서 만든 ListNode 를 사용해서 Stack 을 구현하세요.</p>\n<ul>\n<li>ListNode head 를 가지고 있는 ListNodeStack 클래스를 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n</li>\n<li>\n<p>과제 5. Queue 를 구현하세요.</p>\n<ul>\n<li>배열을 사용해서 한번</li>\n<li>ListNode 를 사용해서 한번.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>1. 선택문</h3>\n<ul>\n<li>\n<p>switch 문</p>\n<ul>\n<li>\n<p>switch 에 선언된 변수가 case 의 값을 만족시킬 때 해당 부분의 실행문을 실행시킨 뒤 break 를 통해 빠져나간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>변수<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> 값<span class=\"token number\">1</span> <span class=\"token operator\">:</span>\n      실행문<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> 값<span class=\"token number\">2</span> <span class=\"token operator\">:</span>\n      실행문<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>java 13 부터는 switch 문에서 <strong>-></strong> 와 <strong>yield</strong> 키워드를 사용하여 다음과 같은 형태로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> mode <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is b or c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>if ~ else 문</p>\n<ul>\n<li>\n<p>if 내 선언된 조건식이 true 일 경우 실행문1을 false 일 경우 실행문2를 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  실행문<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  실행문<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>else if 문</p>\n<ul>\n<li>\n<p>if 내에 선언된 조건이 일치할 경우, 그 범위 내의 실행문을 실행시키고 모두 일치하지 않을 경우 else 의 내용을 실행한다. 순차적으로 진행되기 때문에 앞 조건을 만족시킬 경우 뒷 조건을 실행하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    실행문<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    실행문<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    실행문<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    실행문<span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2. 반복문</h3>\n<ul>\n<li>\n<p>for 문</p>\n<ul>\n<li>\n<p>for 문은 초기화한 변수가 조건식에 만족하는 경우에 해당 실행문을 실행하고, 증감식을 통해 변수의 값을 증감하는 것을 반복한다. 변수가 조건식에 만족하지 않을 경우 for 문이 종료된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>변수초기화 <span class=\"token punctuation\">;</span> 조건식 <span class=\"token punctuation\">;</span> 증감식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n 실행문<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>for ~ each 문</p>\n<ul>\n<li>향상된 for 문이라고도 불리며, 자바 5버전부터 추가된 구문이다. 일반적으로 배열이나 Collection 클래스를 반복하는데 사용된다.</li>\n<li>\n<p>인덱스를 생성해 접근하는 단순 for 문 보다 수행속도가 조금 더 빠르고, 코드의 가독성이 더 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> 각 요소 값 <span class=\"token operator\">:</span> 배열이나 컨테이너 값 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  반복 수행할 작업\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>while 문</p>\n<ul>\n<li>\n<p>조건식이 true 일 경우 코드를 실행하고 false 일 경우 반복문을 종료한다. 다만 여기서 주의해야 할 점은 조건식이 계속 참일 경우 무한 루프를 돌게 되므로 <strong>while 내에 반드시 조건식을 빠져 나올 수 있는 구문이 있어야 한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  반복 수행할 작업<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>do ~ while 문</p>\n<ul>\n<li>\n<p>while 문과 비슷하지만 do ~ while 문은 조건식에 상관없이 무조건 한번 수행 후에 조건식을 판별한다. 어떠한 반복 작업 수행에서 꼭 한번은 수행되어야 하는 경우가 있다면 do ~ while 을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  반복 수행할 작업<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>continue 문</p>\n<ul>\n<li>해당 반복부분만 탈출하고 다음 반복을 이어서 수행한다.</li>\n<li>\n<p>아래의 코드를 예로 들면 i 가 3인 경우는 skip 하고 반복문을 계속 수행하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>break 문</p>\n<ul>\n<li>즉시 해당 반복문을 빠져나간다.</li>\n<li>\n<p>아래의 코드를 예로 들면 i 가 2인 경우까지 반복문이 수행후 종료된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/whiteship-live-study-week4/","prefix":"2020-12-28"},"frontmatter":{"title":"자바 제어문","category":"whiteship-live-study"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p>🔘 안되면 될 때 까지! 🏃 🔘</p>"}},"pageContext":{"slug":"/whiteship-live-study-week4/","prev":{"id":"cc135d21-bd76-5d33-986b-df333a6cde74","fields":{"slug":"/whiteship-live-study-week3/","prefix":"2020-12-27","source":"posts"},"frontmatter":{"title":"자바에서 제공하는 연산자","category":"whiteship-live-study"}},"next":{"id":"c78c9d3b-90a0-5c5b-ab31-f48ac9cbeaf0","fields":{"slug":"/whiteship-live-study-week5/","prefix":"2020-12-30","source":"posts"},"frontmatter":{"title":"자바 클래스","category":"whiteship-live-study"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}