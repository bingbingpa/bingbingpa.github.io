{"componentChunkName":"component---src-templates-post-template-js","path":"/whiteship-live-study-week3/","result":{"data":{"post":{"id":"cc135d21-bd76-5d33-986b-df333a6cde74","html":"<h2>whiteship/live-study 3주차 정리</h2>\n<ul>\n<li>\n<p>목표</p>\n<ul>\n<li><a href=\"https://github.com/whiteship/live-study/issues/3\">자바가 제공하는 다양한 연산자를 학습하세요.</a></li>\n</ul>\n</li>\n<li>\n<p>학습할 것</p>\n<ul>\n<li>산술 연산자</li>\n<li>비트 연산자</li>\n<li>관계 연산자</li>\n<li>논리 연산자</li>\n<li>instanceof</li>\n<li>assignment(=) operator</li>\n<li>화살표(->) 연산자</li>\n<li>3항 연산자</li>\n<li>연산자 우선 순위</li>\n<li>(optional) Java 13. switch 연산자</li>\n</ul>\n</li>\n</ul>\n<h3>1. 산술 연산자</h3>\n<ul>\n<li>산술 연산자는 정수, 부동소수점, 문자열 등 boolean 타입을 제외한 모든 Primitive Type 에서 사용이 가능하다.</li>\n<li>\n<p>더하기 연산자: <strong>+</strong></p>\n<ul>\n<li>\n<p>만약 + 의 피연산자 중 문자열이 있다면 다른 피연산자도 문자열로 변환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">+</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 10hello</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>빼기 연산자: <strong>-</strong></p>\n<ul>\n<li>더하기 연산처럼 문자열 연산은 불가능 하다.</li>\n</ul>\n</li>\n<li>곱하기 연산자: *</li>\n<li>\n<p>나누기 연산자: <strong>/</strong></p>\n<ul>\n<li>두 피연산자가 모두 정수라면 결과도 정수이며, 나머지는 내림으로 없어지고, 피연산자 중 부동소수점이 있다면 결과도 부동소수점이다.</li>\n<li>정수를 0으로 나누면 <strong>ArithmeticException</strong> 이 발생한다.</li>\n<li>\n<p>부동소수점을 0으로 나누면 <strong>Infinity</strong> 혹은 <strong>NaN</strong> 이 결과로 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">/</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.3333333333333335</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>나머지 연산자: <strong>%</strong></p>\n<ul>\n<li>첫번째 피연산자를 두번째 피연산자로 나누고 남은 나머지를 정수로 리턴하며, 리턴된 결과는 첫번째 피연산자의 부호와 동일하다.</li>\n<li>\n<p>일반적으로 정수 피연산자와 사용되지만 부동소수점에도 사용이 가능하고 결과도 부동소수점으로 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -2 (첫번째 피연산자의 부호와 결과의 부호가 동일)</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.313f</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.3129997</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2. 비트 연산자</h3>\n<ul>\n<li>비트 연산자는 개별 비트를 조작하는 저수준 연산자로, 부동소수점, boolean, 배열, 객체 등을 피연산자로 사용할 수 없다.</li>\n<li>\n<p>비트 보수: <strong>~</strong></p>\n<ul>\n<li>비트 반전 또는 비트 NOT 연산자. 각 비트를 반전시켜 1을 0으로, 0을 1로 변환한다.</li>\n</ul>\n</li>\n<li>\n<p>AND: <strong>&#x26;</strong></p>\n<ul>\n<li>\n<p>두 정수 피연산자를 AND 연산(비트곱). 두 피연산자의 해당 비트가 모두 1일때만 1, 아니면 0을 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> result1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10010110</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -106</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 150</span></code></pre></div>\n</li>\n<li>위에서 16진수 0xff(255), 이진수로는 11111111 라는 숫자를 &#x26; 비트 연산을 한다. int 형은 4바이트 데이터이며, 32자리 비트중 맨 뒤에서 8번째 비트가 1이라고 마이너스로 인식되지 않도록 하기 위해서 &#x26; 비트 연산을 한다.</li>\n</ul>\n</li>\n<li>\n<p>OR: <strong>|</strong></p>\n<ul>\n<li>두 정수 피연산자를 OR 연산(비트합)</li>\n</ul>\n</li>\n<li>\n<p>XOR: <strong>^</strong></p>\n<ul>\n<li>두 정수 피연산자를 XOR 연산. 두 피연산자의 해당 비트가 같으면 0, 다르면 1을 리턴한다.</li>\n</ul>\n</li>\n<li>\n<p>왼쪽 시프트 연산: <strong>&#x3C;&#x3C;</strong></p>\n<ul>\n<li>비트를 왼쪽으로 두 번째 피연산자로 제시된 비트 수 만큼 이동시킨다.</li>\n<li>시프트 될 때 기존의 가장 왼쪽 비트는 삭제되고 가장 오른쪽 비트는 0으로 채워진다.</li>\n<li>\n<p><strong>시프트 연산 숫자만큼 곱셈이 된다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00001010</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00010100</span>\n<span class=\"token keyword\">int</span> result2 <span class=\"token operator\">=</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00101000</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>오른쪽 시프트 연산: <strong>>></strong></p>\n<ul>\n<li>우측으로 두번째 피연산자로 제시된 비트 수 만큼 이동 시킨다.</li>\n<li>가장 오른쪽 비트는 삭제되고 기존의 값이 양수인 경우 가장 왼쪽 비트는 0으로 채워지고, 음수인 경우는 1이 채워진다.</li>\n<li><strong>시프트 연산 숫자만큼 나눗셈이 된다.</strong></li>\n</ul>\n</li>\n<li>\n<p>부호없는(unsigned) 오른쪽 시프트 연산: <strong>>>></strong></p>\n<ul>\n<li>기본적으로 오른쪽 시프트 연산과 동일하지만 부호에 관계없이 왼쪽 비트는 무조건 0으로만 채워진다. 그렇기 때문에 음수에 >>> 연산을 한다면 결과는 양수가 된다.</li>\n</ul>\n</li>\n</ul>\n<h3>3. 관계 연산자</h3>\n<ul>\n<li>양쪽의 값이 어떤 관계를 갖는지 확인하는 연산자로 값에 따라 true / false 를 리턴한다.</li>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산자</th>\n<th align=\"center\">이름</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">==</td>\n<td align=\"center\">같음</td>\n<td align=\"left\">양쪽 값이 같으면 참, 다르면 거짓</td>\n</tr>\n<tr>\n<td align=\"center\">!=</td>\n<td align=\"center\">같지 않음</td>\n<td align=\"left\">양쪽 값이 다르면 참, 같으면 거짓</td>\n</tr>\n<tr>\n<td align=\"center\">></td>\n<td align=\"center\">보다 큼</td>\n<td align=\"left\">왼족 값이 크면 참, 같거나 작으면 거짓</td>\n</tr>\n<tr>\n<td align=\"center\">>=</td>\n<td align=\"center\">보다 크거나 같음</td>\n<td align=\"left\">왼쪽 값이 크거나 같으면 참, 작으면 거짓</td>\n</tr>\n<tr>\n<td align=\"center\">&#x3C;</td>\n<td align=\"center\">보다 작음</td>\n<td align=\"left\">왼쪽 값이 작으면 참, 같거나 크면 거짓</td>\n</tr>\n<tr>\n<td align=\"center\">&#x3C;=</td>\n<td align=\"center\">보다 작거나 같음</td>\n<td align=\"left\">왼쪽 값이 작거나 같으면 참, 크면 거짓</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3>4. 논리 연산자</h3>\n<ul>\n<li>관계 연산자와 동일하게 양쪽의 값을 비교 후, true / false 를 리턴한다.</li>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산자</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">&#x26;&#x26;ㅤㅤ</td>\n<td align=\"left\">두 연산자가 모두 true 인지 여부를 평가하며, 두 피연산자중 하나라도 false 라면 false 를 리턴한다.</td>\n</tr>\n<tr>\n<td align=\"center\">\\</td>\n<td align=\"left\">\\</td>\n</tr>\n<tr>\n<td align=\"center\">!ㅤㅤ</td>\n<td align=\"left\">단항 연산자로써 해당 값의 결과를 반대로 평가한다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3>5. instanceof</h3>\n<ul>\n<li>\n<p>객체또는 배열값이 어떠한 참조 유형에 맞는 값인지를 평가하는 연산자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">Point</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>point <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>6. assignment(=) operator</h3>\n<ul>\n<li>어떠한 변수에 값을 할당할 때 이 연산자를 사용할 수 있으며, 메모리에 값을 저장하거나 할당한다는 의미이다.</li>\n<li>\n<p>산술 연산자 또는 비트 연산자/시프트 연산자와 결합하여 값을 할당할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 산술 연산자 결합</span>\nnum <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num + 2</span>\nnum <span class=\"token operator\">-=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num - 3</span>\nnum <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num * 2</span>\nnum <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num / 2</span>\nnum <span class=\"token operator\">%=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num % 3</span>\n\n<span class=\"token comment\">// 비트 연산자 결합</span>\nnum <span class=\"token operator\">&amp;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num &amp; 2</span>\nnum <span class=\"token operator\">|=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num | 3</span>\nnum <span class=\"token operator\">^=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num ^ 4</span>\n\n<span class=\"token comment\">// 시프트 연산자 결합</span>\nnum <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num &lt;&lt; 3</span>\nnum <span class=\"token operator\">>>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num >> 4</span>\nnum <span class=\"token operator\">>>>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num = num >>> 2</span></code></pre></div>\n</li>\n</ul>\n<h3>7. 화살표(->) 연산자</h3>\n<ul>\n<li>Java8 부터 도입된 연산자로 람다 표현식(Lambda Expression) 이라고 하며 메소드 본문에 해당 실행 가능한 자바코드의 익명 컬렉션이다.</li>\n<li>\n<p>메소드 파라미터 목록, 연산자, 코드 블럭 순으로 구성되며, 코드 블럭이 한 문장으로 끝난다면 중괄호를 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nr<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 코드가 한 문장이면 중괄호 생략 가능</span>\n<span class=\"token class-name\">Runnable</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>8. 3항 연산자</h3>\n<ul>\n<li>if ~ else 문장을 연산자로 표현할 수 있고 조건에 따라 결과를 반환할 수 있다.</li>\n<li>\n<p>조건 ? true 일때 결과값 : false 일때 결과값</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> i <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3>9. 연산자 우선 순위</h3>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th align=\"center\">우선순위</th>\n<th align=\"center\">연산자</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">(), []</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">!, ~, ++, —</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">*, /, %</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">+, -</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">&#x3C;&#x3C;, >>, >>></td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">&#x3C;, &#x3C;=, >, >=</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">==, !=</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">&#x26;</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">^</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">\\</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\">&#x26;&#x26;</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\">\\</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">? :(삼항연산자)</td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td align=\"center\">=, *=, /=, %=, +=, -=, &#x3C;&#x3C;=, >>=, >>>=, &#x26;=, ^=,</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3>10. Java 13. switch 연산자</h3>\n<ul>\n<li><strong>yield</strong> 키워드를 사용하여 switch 표현식을 리턴할 수 있다. 코드블럭이 한문장일 경우 yield 생략 가능.</li>\n<li>\n<p><strong>-></strong> 를 사용하여 case 구문 처리가 가능하다.</p>\n<ul>\n<li>\n<p>기존 switch 문</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> mode <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span>\n      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">:</span>\n      result <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"c\"</span><span class=\"token operator\">:</span>\n      result <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      result <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>java 13 switch 문</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> mode <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is b or c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/whiteship-live-study-week3/","prefix":"2020-12-27"},"frontmatter":{"title":"자바에서 제공하는 연산자","category":"java"}},"authornote":{"id":"8b2419cd-9b30-5409-9d2c-da10779777d4","html":"<p><strong>OpenSesame</strong></p>\n<ul>\n<li>안되면 될 때 까지!</li>\n<li>무분별한 정보 보다는 정확한 정보를 전달하도록 노력하기.</li>\n</ul>"}},"pageContext":{"slug":"/whiteship-live-study-week3/","prev":{"id":"0c9374d9-2db0-5fac-a7ee-35a1226fca1d","fields":{"slug":"/whiteship-live-study-week2/","prefix":"2020-12-26","source":"posts"},"frontmatter":{"title":"자바 데이터 타입, 변수 그리고 배열","category":"java"}},"next":{"id":"26a716c2-895c-5081-81bb-937c599d1408","fields":{"slug":"/whiteship-live-study-week4/","prefix":"2020-12-28","source":"posts"},"frontmatter":{"title":"자바 제어문","category":"java"}},"source":"posts"}},"staticQueryHashes":["960164547","960164547"]}